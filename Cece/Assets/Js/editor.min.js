/**
 * Cece
 * (c) 2019, Daniel James
 * 
 * Cecelia Post Editor
 * 
 * @package Cece
 */
$(document).ready(function() {

	// Keyboard shortcuts
	$(window).keydown(function(e) {

		var keyPressed = String.fromCharCode(e.which);

		// Ctrl / Cmd
		if (e.ctrlKey || e.keyCode === 91 || e.keyCode === 93 || e.keyCode === 224) {

			// Ctrl + Shift
			if (e.shiftKey) {

				switch (keyPressed) {

					case 'U':
						e.preventDefault();
						addMarkdown($('#toolbar-strikethrough'));
					break;

					case 'K':
						e.preventDefault();
						addMarkdown($('#toolbar-code'));
					break;

					case 'I':
						e.preventDefault();
						addMarkdown($('#toolbar-image'));
					break;

				}

			} else {

				switch (keyPressed) {

					case 'H':
						e.preventDefault();
						addMarkdown($('#toolbar-heading'));
					break;

					case 'B':
						e.preventDefault();
						addMarkdown($('#toolbar-bold'));
					break;

					case 'I':
						e.preventDefault();
						addMarkdown($('#toolbar-italic'));
					break;

					case 'K':
						e.preventDefault();
						addMarkdown($('#toolbar-link'));
					break;

					case 'L':
						e.preventDefault();
						addMarkdown($('#toolbar-list'));
					break;

					case 'O':
						e.preventDefault();
						addMarkdown($('#toolbar-olist'));
					break;

					case 'Q':
						e.preventDefault();
						addMarkdown($('#toolbar-quote'));
					break;

				}

			}

		}

	});

	/**
	 * Set the cursor position in the textarea.
	 */
	$.fn.setCursorPos = function(pos) {
		return this.each(function() {
			this.selectionStart = pos;
			this.selectionEnd = pos;
		});
	}

	/**
	 * Bind textarea changes to update character count.
	 */
	$('#editor__textarea').bind('input propertychange', function() {
		var charCount = $(this).val().length;
		$('#editor__charcount').text(charCount);
	});

	// Adds markdown syntax to cursor position
	function addMarkdown($btn = null, $txt = $("#editor__textarea")) {

		var caretPos = $txt[0].selectionStart;
		var textAreaTxt = $txt.val();

		// Adds text markdown syntax to current cursor position
		var syntax = $btn.attr('data-syntax');

		// Crry on if not undefined.
		if ( typeof syntax !== 'undefined' ) {

			if ( syntax === '# ' || syntax === '> ' ) {

				if ( textAreaTxt.substring( caretPos - 2, caretPos ) === syntax ) {

					$txt.val( textAreaTxt.substring( 0, caretPos - 1 ) + syntax + textAreaTxt.substring(caretPos));

				} else {

					$txt.val( textAreaTxt.substring( 0, caretPos ) + syntax + textAreaTxt.substring( caretPos ) );

				}

			} else {

				$txt.val( textAreaTxt.substring( 0, caretPos ) + syntax + textAreaTxt.substring( caretPos ) );

			}


			// Places cursor in between syntax beginning and end
			$('#editor__textarea').focus();

			// Syntax which don't contain closing syntax
			if (syntax.length === 1 || syntax === '[]()') {

				$('#editor__textarea').setCursorPos(caretPos + 1);

			} else if (syntax === '# ' || syntax === '- ' || syntax === '> ') {

				$('#editor__textarea').setCursorPos(caretPos + 2);

			} else if (syntax === '1. ') {

				$('#editor__textarea').setCursorPos(caretPos + 3);

			} else {

				// Places cursor between opening and closing syntax
				$('#editor__textarea').setCursorPos(caretPos + syntax.length/2);

			}

		}

	}

	/**
	 * Toolbar item click handler.
	 */
	$('.editor__toolbar button.toolbar-item').click(function(e) {
		e.preventDefault();
		addMarkdown($(this));
	});

	/**
	 * Add media from library.
	 */
	$('.editor__media a.insert-media').click(function(e) {
		e.preventDefault();
		addMarkdown($(this));
		$('body').toggleClass('eo-open');
		$('.editor__media').toggleClass('open');
		$('.editor__media').fadeToggle();
	});

	/**
	 * Show/hide editor settings panel.
	 */
	$('body').on('click', '.toolbar-settings-toggle', function(e) {
		e.preventDefault();
		$('body').toggleClass('es-open');
		$('.editor__settings').toggleClass('open');
		$('.editor__settings').fadeToggle();
	});

	$('body').on('keypress', '.toolbar-settings-toggle', function(e) {
		e.preventDefault();
		if ( 13 == e.which ) {
			$('body').toggleClass('es-open');
			$('.editor__settings').toggleClass('open');
			$('.editor__settings').fadeToggle();
		}
	});

	/**
	 * Media library toggle.
	 */
	$('body').on('click', '.toolbar-media-toggle', function(e) {
		e.preventDefault();
		$('body').toggleClass('eo-open');
		$('.editor__media').toggleClass('open');
		$('.editor__media').fadeToggle();
	});

	$('body').on('keypress', '.toolbar-media-toggle', function(e) {
		e.preventDefault();
		if ( 13 == e.which ) {
			$('body').toggleClass('eo-open');
			$('.editor__media').toggleClass('open');
			$('.editor__media').fadeToggle();
		}
	});

	/**
	 * Media library load more.
	 */
	$('body').on('click', '.js-media-more', function(e) {
		e.preventDefault();
		$.ajax({
			url: "/api/media-pagination/",
			data: {
				count: $('.editor__media').attr('data-media-count')
			},
			dataType: 'text',
			type: 'post',
			success: function( returns ) {
				returns = JSON.parse( returns );
				$('.editor__media').attr('data-media-count', returns.offset);
				$('.editor__media .media__gallery').append(returns.html);
				if ( true === returns.end ) {
					$('.editor__media .js-media-more').fadeOut().remove();
				}
			}
		});
	});

	$('body').on('keypress', '.js-media-more', function(e) {
		e.preventDefault();
		if ( 13 == e.which ) {
			$.ajax({
				url: "/api/media-pagination/",
				data: {
					count: $('.editor__media').attr('data-media-count')
				},
				dataType: 'text',
				type: 'post',
				success: function( returns ) {
					returns = JSON.parse( returns );
					$('.editor__media').attr('data-media-count', returns.offset);
					$('.editor__media .media__gallery').append(returns.html);
					if ( true === returns.end ) {
						$('.editor__media .js-media-more').fadeOut().remove();
					}
				}
			});
		}
	});

});
